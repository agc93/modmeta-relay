<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ModMeta Relay â€“ Developer Guide</title><link>https://agc93.github.io/modmeta-relay/docs/developer/</link><description>Recent content in Developer Guide on ModMeta Relay</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://agc93.github.io/modmeta-relay/docs/developer/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: ModMeta API</title><link>https://agc93.github.io/modmeta-relay/docs/developer/modmeta/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://agc93.github.io/modmeta-relay/docs/developer/modmeta/</guid><description>
&lt;p>For plugin authors, the most important things to know about the ModMeta API are the request types and version matching.&lt;/p>
&lt;h3 id="request-types">Request Types&lt;/h3>
&lt;h4 id="key-by_key">Key (&lt;code>by_key&lt;/code>)&lt;/h4>
&lt;p>This is the &amp;ldquo;default&amp;rdquo; request used by Vortex, and the only request supported by Nexus Mods. It's also the simplest and requests metadata using a single key: the MD5 hash of the mod archive file. This is super useful for mod sources that store a hash as it's fast, unique and simple.&lt;/p>
&lt;h4 id="logical-file-name-by_name">Logical File Name (&lt;code>by_name&lt;/code>)&lt;/h4>
&lt;p>This is the next-best request, not as specific as file key, but not as vague or intensive as expression. Technically speaking, the logical file name is just a string, but it's usually a string that's semantically important to the mod, such as a unique name for a specific variant of a file.&lt;/p>
&lt;blockquote>
&lt;p>Logical file name lookups also use version matching&lt;/p>
&lt;/blockquote>
&lt;h4 id="file-expression-by_expression">File Expression (&lt;code>by_expression&lt;/code>)&lt;/h4>
&lt;p>File expressions are, essentially, glob patterns. That makes them very flexible and able to work with practically any file/mod format, but also fragile and intensive to look up, so they are considered a last-ditch option for when the other two are not possible.&lt;/p>
&lt;blockquote>
&lt;p>File expression lookups also use version matching&lt;/p>
&lt;/blockquote>
&lt;h3 id="version-matching">Version Matching&lt;/h3>
&lt;p>Lookups using logical file name or file expression also use a version string to match specific versions of a file. Version matches are not (necessarily) an exact match and are best specified as a version range.&lt;/p>
&lt;p>If you've used Node/&lt;code>npm&lt;/code> and it's version semantics before, that's how &lt;code>modmeta-db&lt;/code> does its version matching. ModMeta Relay tries to match that as closely as possible, but for those curious, existing plugins are using &lt;a href="https://github.com/adamreeve/semver.net">semver.net (Sematnic Versioning for .NET)&lt;/a> for version matching.&lt;/p>
&lt;p>The actual implementation of matching version strings with mod package/file versions is up to plugins, but should always be as specific as practical since returning too many results for a mod can result in conflicting metadata.&lt;/p></description></item><item><title>Docs: Building Plugins</title><link>https://agc93.github.io/modmeta-relay/docs/developer/plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://agc93.github.io/modmeta-relay/docs/developer/plugins/</guid><description>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>At their most basic, a Relay plugin is simply an assembly with an implementation of &lt;code>IModMetaSource&lt;/code> (from &lt;code>ModMeta.Core&lt;/code>), and optionally an implementation of &lt;code>IModMetaPlugin&lt;/code>.&lt;/p>
&lt;p>The &lt;code>IModMetaSource&lt;/code> interface is how the Relay server passes mod metadata queries to your plugin and handles the responses to pass on to the original client.&lt;/p>
&lt;h2 id="implementing-a-metadata-source">Implementing a metadata source&lt;/h2>
&lt;p>In short, add a reference to &lt;code>ModMeta.Core&lt;/code> and implement the &lt;code>IModMetaSource&lt;/code> interface. The various &lt;code>GetBy*&lt;/code> methods are the main entry points the server will call when it gets a request for a mod.&lt;/p>
&lt;h3 id="request-type-support">Request Type Support&lt;/h3>
&lt;p>Since not every &lt;a href="../../docs/developer/modmeta/#request-types">request type&lt;/a> might make sense for the metadata source you're building, plugins can choose to only work with certain request types.&lt;/p>
&lt;p>If your plugin doesn't support a request type &lt;em>at all&lt;/em>, not returning it from the &lt;code>SupportedTypes&lt;/code> property will cause the server to never even call your plugin for that type. If you only want to skip &lt;em>certain&lt;/em> requests, throwing a &lt;code>NotImplementedException&lt;/code> will cause the server to ignore your plugin's results for that request.&lt;/p>
&lt;h3 id="async-and-timeouts">Async and timeouts&lt;/h3>
&lt;p>All configured plugins are called by the server at the same time for each request. If you're familiar with the TPL, we're currently using &lt;code>Task.WhenAll()&lt;/code> so your plugin will &lt;em>not&lt;/em> be running in a different thread. To keep UX non-awful, there's a hard limit configured of 5 seconds after which any plugins that haven't returned their results are ignored. Given metaservers calls often block installation (as they do in Vortex), making your plugin return data as fast as possible will lead to a much better experience.&lt;/p>
&lt;h2 id="complex-plugins-and-imodmetaplugin">Complex Plugins and &lt;code>IModMetaPlugin&lt;/code>&lt;/h2>
&lt;p>If your mod has more advanced requirements or you want to take advantage of runtime DI, you can register your plugin using an implementation of &lt;code>IModMetaPlugin&lt;/code>. Much like a metadata source (&lt;code>IModMetaSource&lt;/code>), the server will dynamically load your plugin and locate your implementation of &lt;code>IModMetaPlugin&lt;/code>.&lt;/p>
&lt;blockquote>
&lt;p>If you use &lt;code>IModMetaPlugin&lt;/code>, the server will &lt;em>not&lt;/em> automatically register your &lt;code>IModMetaSource&lt;/code> implementation, you need to do that yourself in the &lt;code>ConfigureServices&lt;/code> method.&lt;/p>
&lt;/blockquote>
&lt;p>Using the &lt;code>IModMetaPlugin.ConfigureServices&lt;/code> method, you can register any dependencies you need, read configuration or resolve extra services from the DI container of the host serve. For example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#000">IServiceCollection&lt;/span> &lt;span style="color:#000">ConfigureServices&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">IServiceCollection&lt;/span> &lt;span style="color:#000">services&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">IConfiguration&lt;/span> &lt;span style="color:#000">configuration&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">services&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">AddSingleton&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">BeatModsClient&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000">services&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">AddSingleton&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">IModMetaSource&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">BeatModsSource&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">services&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>