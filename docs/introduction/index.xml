<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ModMeta Relay â€“ Introduction</title><link>/docs/introduction/</link><description>Recent content in Introduction on ModMeta Relay</description><generator>Hugo -- gohugo.io</generator><atom:link href="/docs/introduction/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: ModMeta Basics</title><link>/docs/introduction/basics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/introduction/basics/</guid><description>
&lt;p>The ModMeta API is a simple REST API that at its most basic is an API for providing extended information about mods.&lt;/p>
&lt;p>More specifically, ModMeta APIs (aka Metaservers) are used to provide additional information and attributes for specific mods based on details of the mod file itself. They do &lt;strong>not&lt;/strong> serve mods, nor make them discoverable, but are specifically for providing metadata for a mod file that a consuming client (Vortex, for example) already knows about.&lt;/p>
&lt;h3 id="modmeta-db">&lt;code>modmeta-db&lt;/code>&lt;/h3>
&lt;p>While we refer to it as the &amp;ldquo;ModMeta API&amp;rdquo;, it's not exactly that formalized. The &amp;ldquo;API&amp;rdquo; is just the API surfaced by &lt;code>modmeta-db&lt;/code>, the library that Vortex uses to fetch metadata from Nexus Mods and any other configured metaservers.&lt;/p>
&lt;p>The ModMeta DB is both a client and server implementation that serves metadata from a local database or the Nexus Mods API (by default). If you're just looking for a basic working implementation of the ModMeta pattern, then &lt;code>modmeta-db&lt;/code> is the server for you.&lt;/p>
&lt;h3 id="modmeta-relay">ModMeta Relay&lt;/h3>
&lt;p>So what's different about the Relay server? ModMeta Relay intends to be an extensible and configurable server that can provide a ModMeta-compatible API to any other non-Nexus metadata source.&lt;/p>
&lt;p>ModMeta Relay doesn't provide any metadata itself! The Relay server does the basics of handling the REST API specifics, query binding and basic validation etc. The actual metadata comes from &lt;strong>plugins&lt;/strong> that the server loads, using a ModMeta-like API. Those plugins can then load metadata from a file, database, API or cache and the Relay server will return the results.&lt;/p></description></item><item><title>Docs: Relay Plugins</title><link>/docs/introduction/plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/introduction/plugins/</guid><description>
&lt;p>The ModMeta Relay server doesn't store or serve &lt;em>any&lt;/em> mod metadata. All the metadata that it returns to clients comes from the currently loaded &lt;strong>plugins&lt;/strong>.&lt;/p>
&lt;p>When the Relay server starts up, it will automatically load all the installed plugins (see below) and use them as metadata sources to respond to incoming requests. For each request, the server will query &lt;em>all&lt;/em> the available plugins so it's possible for a single request to return multiple different metadata records.&lt;/p>
&lt;p>Plugins can selectively support only parts of the ModMeta API if the source they represent doesn't support it, for example.&lt;/p>
&lt;h2 id="plugin-loading">Plugin Loading&lt;/h2>
&lt;p>Plugins are automatically loaded (by default) from a &lt;code>plugins/&lt;/code> directory in the application root. Plugins must be located in a directory under &lt;em>plugins&lt;/em> with the same name as the plugin assembly (without the &lt;code>.dll&lt;/code>). Each plugin can add one or more metadata sources and the server will automatically load all of them and use them to retrieve metadata from requests.&lt;/p>
&lt;p>For more detail, check out the &lt;a href="../../docs/usage/plugins">usage docs&lt;/a>.&lt;/p></description></item><item><title>Docs: Frequently Asked Questions</title><link>/docs/introduction/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/introduction/faq/</guid><description>
&lt;p>Below is a collection of frequent questions and the best answers I can give.&lt;/p>
&lt;h3 id="why-should-i-use-this">Why should I use this?&lt;/h3>
&lt;p>If your integration/extension/game/mod are using Vortex and mods hosted on Nexus Mods, you probably don't need this! ModMeta Relay is specifically intended at making it easier to support non-Nexus mod sources with metadata for Vortex (or any other ModMeta client).&lt;/p>
&lt;h3 id="why-not-just-use-modmeta-db">Why not just use modmeta-db?&lt;/h3>
&lt;p>Use what you prefer! I was looking for something a little less structured/opinionated than the basic &lt;code>modmeta-db&lt;/code>, so designed this as an alternative.&lt;/p>
&lt;p>Ideally, from a client's point of view, it shouldn't even be obvious whether your metaserver is using &lt;code>modmeta-db&lt;/code> or the ModMeta Relay.&lt;/p>
&lt;h3 id="how-do-i-get-modmeta-relay-to-use-metadata-from-x">How do I get ModMeta relay to use metadata from &lt;x>?&lt;/h3>
&lt;p>Unless you know there's already a plugin for the source in question, you will probably need to build one. This is a reasonably simple process and the server should pick up any available plugins at startup.&lt;/p>
&lt;p>There's a ton of docs on building for/with Relay in &lt;a href="../../docs/developer">the developer docs&lt;/a>.&lt;/p>
&lt;h3 id="why-are-there-so-many-references-to-beat-saberbeatvortex-in-here">Why are there so many references to Beat Saber/BeatVortex in here?&lt;/h3>
&lt;p>Just like how &lt;code>modmeta-db&lt;/code> was born out of the Vortex project but is now a separate component, ModMeta Relay was originally a component of BeatVortex until I realised it could be split out as a game- and source-agnostic metadata server. In particular, the BeatVortex plugin is still currently part of this repository, but will be moved at a later date.&lt;/p></description></item></channel></rss>